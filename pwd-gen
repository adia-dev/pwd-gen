#!/bin/bash

set -e

color_cyan() {
    echo -ne "\033[1;36m$1\033[0m"
}

color_yellow() {
    echo -ne "\033[1;33m$1\033[0m"
}

color_green() {
    echo -ne "\033[1;32m$1\033[0m"
}

color_blue() {
    echo -ne "\033[1;34m$1\033[0m"
}

color_magenta() {
    echo -ne "\033[1;35m$1\033[0m"
}

help() {
    EXECUTABLE="pwd-gen"

    color_cyan "Usage: $EXECUTABLE [OPTIONS]...\n"
    color_yellow "Generate a random password using various methods.\n\n"
    color_green "Options:\n"
    color_blue "  sha                     "
    echo "Generate a SHA-256 hashed password"
    color_blue "  sha512                  "
    echo "Generate a SHA-512 hashed password"
    color_blue "  base64                  "
    echo "Generate a Base64 encoded password"
    color_blue "  md5                     "
    echo "Generate an MD5 hashed password (less secure)"
    color_blue "  -it, --interactive        "
    echo "Generate a password with an interactive interface"
    color_blue "  --output-file             "
    echo "Specify the output file for the password"
    color_blue "  --verbose                 "
    echo "Enable verbose output"
    color_blue "  --quiet                   "
    echo "Suppress all output"
    color_green "Examples:\n"
    color_magenta "  $EXECUTABLE sha\n"
    color_magenta "  $EXECUTABLE sha512\n"
    color_magenta "  $EXECUTABLE base64\n"
    color_magenta "  $EXECUTABLE md5\n"
    exit 1
}

interactive_mode() {
    echo "Select the password generation algorithm:"
    select choice in "sha-256" "sha-512" "base64" "md5" "exit"; do
        case $choice in
            "sha-256") dd if=/dev/urandom bs=32 count=1 2>/dev/null | shasum -a 256 -b | sed 's/ .*//g';;
            "sha-512") dd if=/dev/urandom bs=64 count=1 2>/dev/null | shasum -a 512 -b | sed 's/ .*//g';;
            "base64") dd if=/dev/urandom bs=16 count=1 2>/dev/null | base64 | sed 's/=//g';;
            "md5") dd if=/dev/urandom bs=16 count=1 2>/dev/null | md5 | cut -d' ' -f1;;
            "exit") exit 1
        esac
        break
    done
}

OUTPUT_FILE=""
VERBOSE=0
QUIET=0

while [[ "$#" -gt 0 ]]; do
    case "$1" in
        sha|sha512|base64|md5)
            METHOD="$1"
            shift
            ;;
        -it|--interactive)
            interactive_mode
            exit 1
            ;;
        --output-file)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE=1
            shift
            ;;
        --quiet)
            QUIET=1
            shift
            ;;
        *)
            help
            ;;
    esac
done

generate_password() {
    case "$METHOD" in
        sha)
            COMMAND="dd if=/dev/urandom bs=32 count=1 2>/dev/null | shasum -a 256 -b | sed 's/ .*//g'"
            ;;
        sha512)
            COMMAND="dd if=/dev/urandom bs=64 count=1 2>/dev/null | shasum -a 512 -b | sed 's/ .*//g'"
            ;;
        base64)
            COMMAND="dd if=/dev/urandom bs=16 count=1 2>/dev/null | base64 | sed 's/=//g'"
            ;;
        md5)
            COMMAND="dd if=/dev/urandom bs=16 count=1 2>/dev/null | md5 | cut -d' ' -f1"
            ;;
        *)
            help
            ;;
    esac

    if [ $QUIET -ne 1 ]; then
        if [ "$OUTPUT_FILE" != "" ]; then
            if [ ! -w "$OUTPUT_FILE" ]; then
                echo "Error: Cannot write to output file '$OUTPUT_FILE'."
                exit 1
            fi
            eval "$COMMAND" > "$OUTPUT_FILE"
            [ $VERBOSE -eq 1 ] && echo "Password saved to $OUTPUT_FILE"
        else
            PASSWORD=$(eval "$COMMAND")
            echo "$PASSWORD"
        fi
    fi
}

generate_password
